/*
 * 
 *   Copyright 2017  NHS Digital
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *  
 */
package uk.nhs.digital.projectuiframework.ui;
import com.sun.glass.events.MouseEvent;
import java.awt.Container;
import uk.nhs.digital.projectuiframework.Project;
import uk.nhs.digital.projectuiframework.ProjectHelper;
import java.io.File;
import java.util.HashMap;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import uk.nhs.digital.safetycase.ui.LibraryEditorDialog;
import uk.nhs.digital.safetycase.ui.ProjectEditor;
import uk.nhs.digital.safetycase.ui.views.ViewConstructor;
/**
 *
 * @author damian
 */
public class ProjectWindow extends javax.swing.JFrame {
    
    private HashMap<String,Project> projects = new HashMap<>();
    private uk.nhs.digital.projectuiframework.Project lastProjectAdded = null;
    /**
     * Creates new form ProjectWindow
     */
    public ProjectWindow() {
        initComponents();
    }

    public void setTreeCellRenderer(TreeCellRenderer r) {
        projectTree.setCellRenderer(r);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is alwathrow new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.ys
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainWindowSplitPane = new javax.swing.JSplitPane();
        projectTreeScrollPane = new javax.swing.JScrollPane();
        projectTree = new javax.swing.JTree();
        mainWindowTabbedPane = new javax.swing.JTabbedPane();
        mainMenu = new javax.swing.JMenuBar();
        mainFileMenu = new javax.swing.JMenu();
        mainMenuNew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mainMenuExit = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        libraryMenuItem = new javax.swing.JMenuItem();
        undeleteMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpAboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        projectTreeScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        projectTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        projectTreeScrollPane.setPreferredSize(new java.awt.Dimension(350, 323));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        projectTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        projectTree.setPreferredSize(new java.awt.Dimension(400, 600));
        projectTree.setRootVisible(false);
        projectTree.setToggleClickCount(3);
        projectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectTreeMouseClicked(evt);
            }
        });
        projectTreeScrollPane.setViewportView(projectTree);

        mainWindowSplitPane.setLeftComponent(projectTreeScrollPane);

        mainWindowTabbedPane.setPreferredSize(new java.awt.Dimension(600, 600));
        mainWindowSplitPane.setRightComponent(mainWindowTabbedPane);

        getContentPane().add(mainWindowSplitPane);

        mainMenu.setBackground(new java.awt.Color(51, 102, 255));
        mainMenu.setForeground(new java.awt.Color(255, 255, 255));
        mainMenu.setName("mainMenu"); // NOI18N

        mainFileMenu.setForeground(new java.awt.Color(255, 255, 255));
        mainFileMenu.setText("File");

        mainMenuNew.setText("New project ...");
        mainMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuNewActionPerformed(evt);
            }
        });
        mainFileMenu.add(mainMenuNew);
        mainFileMenu.add(jSeparator1);

        mainMenuExit.setText("Exit");
        mainMenuExit.setToolTipText("");
        mainMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuExitActionPerformed(evt);
            }
        });
        mainFileMenu.add(mainMenuExit);

        mainMenu.add(mainFileMenu);

        toolsMenu.setForeground(new java.awt.Color(255, 255, 255));
        toolsMenu.setText("Tools");

        libraryMenuItem.setText("Library");
        libraryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libraryMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(libraryMenuItem);

        undeleteMenuItem.setText("Undelete");
        toolsMenu.add(undeleteMenuItem);

        importMenuItem.setText("Import");
        toolsMenu.add(importMenuItem);

        mainMenu.add(toolsMenu);

        helpMenu.setForeground(new java.awt.Color(255, 255, 255));
        helpMenu.setText("Help");

        helpAboutMenuItem.setText("About");
        helpAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpAboutMenuItem);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuNewActionPerformed
        try {
//            Project p = ProjectHelper.createProject();
//            projects.put(p.getName(), p);
//            DefaultMutableTreeNode dtmn = (DefaultMutableTreeNode)projectTree.getModel().getRoot();
//            dtmn.add(p.getProjectRoot());
//            ((DefaultTreeModel)projectTree.getModel()).reload();
            JDialog projectEditor = new JDialog(JOptionPane.getFrameForComponent(this), true);

            projectEditor.add(new ProjectEditor(lastProjectAdded).setParent(projectEditor));
            projectEditor.pack();
            projectEditor.setVisible(true);
              
        }
        catch (Exception e) {
            e.printStackTrace(System.err);
            JOptionPane.showMessageDialog(rootPane, "Error " + e.getMessage() + " details have been saved to the log file", "Error whilst creating", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mainMenuNewActionPerformed

    public javax.swing.JTabbedPane getMainWindowTabbedPane() { return mainWindowTabbedPane; }
    
    public void newObjectRequested(TreePath p) 
    {
        String n = p.getPathComponent(1).toString();
        Project proj = null;
        for (Project ap : projects.values()) {
            if (n.contentEquals(ap.getName())) {
                proj = ap;
                break;
            }
        }
        if (proj == null) {
            return;
        }
        int id = proj.getProjectID((DefaultMutableTreeNode) p.getLastPathComponent());
        if (id == -1) {
            return;
        }
        proj.setCurrentProjectID(id);
        String check = proj.checkNewFromPopupMenu(p); 
        if (check != null) {
            JOptionPane.showMessageDialog(rootPane, check, "Can't make a new one of these here", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        EditorComponent ec = ec = proj.getEditorComponent(p);
        if (ec == null)
            return;
        mainWindowTabbedPane.setSelectedComponent(mainWindowTabbedPane.add(ec.getTitle(), ec.getComponent()));
        mainWindowTabbedPane.setTabComponentAt(mainWindowTabbedPane.getSelectedIndex(), new UndockTabComponent(mainWindowTabbedPane));
    }
    
    public void closeContainer(JPanel p) {
        Container parent = p;
        while ((parent = parent.getParent()) != null) {
            if (parent instanceof javax.swing.JTabbedPane) {
                JTabbedPane jtp = (JTabbedPane)parent;
                int i = jtp.indexOfComponent(p);
                if (i != -1) {
                    jtp.remove(i);
                    return;
                }
            }
            if (parent instanceof uk.nhs.digital.projectuiframework.ui.ExternalEditorView) {
                ((ExternalEditorView) parent).dispose();
                return;
            }
        }
    }
    
    private void projectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectTreeMouseClicked
        
        String p = null;
        try {
            p = (String)projectTree.getSelectionPath().getPathComponent(1).toString();
        }
        catch (NullPointerException e) {
            TreePath tp = projectTree.getPathForLocation(evt.getX(), evt.getY());
            if (tp == null)
                return;
            p = tp.getPathComponent(1).toString();
        }
        Project proj = null;
        for (Project ap : projects.values()) {
            if (p.contentEquals(ap.getName())) {
                proj = ap;
                break;
            }
        }
        if (proj == null) {
            return;
        }
        
        if ((evt.getButton() == MouseEvent.BUTTON_RIGHT) || (evt.getButton() == java.awt.event.MouseEvent.BUTTON3)) {
            if (evt.getClickCount() == 1) {
                TreePath pmp = projectTree.getPathForLocation(evt.getX(), evt.getY());
                if (pmp != null) {
                    if (!proj.checkShowPopup(pmp))
                        return;
                }
                (new ProjectTreePopupMenu(this)).show(projectTree, evt.getX(), evt.getY());
                return;
            }
        }
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            EditorComponent ec = null;
            if (projectTree.getSelectionPath().getPathCount() == 2) // root and the one we can see
                return;
            int id = proj.getProjectID((DefaultMutableTreeNode)projectTree.getSelectionPath().getLastPathComponent());
            proj.setCurrentProjectID(id);
            TreePath t = projectTree.getSelectionPath();
            ec = proj.getEditorComponent(t);
            if (ec == null) {
                // See if we have a ViewComponent instead... add getViewComponent(TreePath t) to Project
                // and implement it... only if *that* returns null do we to the "isCollapsed()" code.
                //
                ViewComponent view = proj.getViewComponent(t);
                if (view == null) {
                    if (projectTree.isCollapsed(t))
                        projectTree.expandPath(t);
                    else
                        projectTree.collapsePath(t);
                    return;
                }
               mainWindowTabbedPane.setSelectedComponent(mainWindowTabbedPane.add(view.getTitle(), view.getComponent()));
               mainWindowTabbedPane.setTabComponentAt(mainWindowTabbedPane.getSelectedIndex(), new UndockTabComponent(mainWindowTabbedPane));                    
               return;
            }
            for (int i = 0; i < mainWindowTabbedPane.getTabCount(); i++) {
                if (ec.getTitle().contentEquals((mainWindowTabbedPane.getTitleAt(i)))) {
                    mainWindowTabbedPane.setSelectedIndex(i);
                    return;
                }
            }
            if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
               mainWindowTabbedPane.setSelectedComponent(mainWindowTabbedPane.add(ec.getTitle(), ec.getComponent()));
               mainWindowTabbedPane.setTabComponentAt(mainWindowTabbedPane.getSelectedIndex(), new UndockTabComponent(mainWindowTabbedPane));                    
            } else {
               ExternalEditorView.start(ec.getComponent(), ec.getTitle(), mainWindowTabbedPane);
            }  
        }        
    }//GEN-LAST:event_projectTreeMouseClicked

    private void mainMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuExitActionPerformed
        
        boolean outstandingsaves = false;
        for (Project p : projects.values()) {
            if (p.hasChanged()) {
                outstandingsaves = true;
                break;
            }
        }
        if (outstandingsaves) {
            int r = JOptionPane.showConfirmDialog(rootPane, "There are changed projects. Exit without saving ?", "Unsaved projects", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.NO_OPTION)
                return;
        }
        System.exit(0);
    }//GEN-LAST:event_mainMenuExitActionPerformed

    private void libraryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libraryMenuItemActionPerformed
        LibraryEditorDialog lde = new LibraryEditorDialog(JOptionPane.getFrameForComponent(this), true);
        lde.setVisible(true);
    }//GEN-LAST:event_libraryMenuItemActionPerformed

    private void helpAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpAboutMenuItemActionPerformed
        HelpAboutDialog had = new HelpAboutDialog(this, true, lastProjectAdded.getHelpAboutIcon());
        had.setVisible(true);
    }//GEN-LAST:event_helpAboutMenuItemActionPerformed

    public void addProject(String n, Project p) {
        lastProjectAdded = p;
        projects.put(n, p);
        DefaultMutableTreeNode d = p.getProjectRoot();
        DefaultTreeModel tm = (DefaultTreeModel)projectTree.getModel();
        ((DefaultMutableTreeNode)tm.getRoot()).add(p.getProjectRoot());
        tm.reload();
        projectTree.expandRow(0);
    }
    
    public void setTreeModel(DefaultTreeModel m, String n, Project p) {
        lastProjectAdded = p;
        projects.put(n, p);
        projectTree.setModel(m);
        projectTree.expandRow(0);
    }
    /**
     * @param args the command line arguments
     */
    public void start(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem helpAboutMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem libraryMenuItem;
    private javax.swing.JMenu mainFileMenu;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem mainMenuExit;
    private javax.swing.JMenuItem mainMenuNew;
    private javax.swing.JSplitPane mainWindowSplitPane;
    private javax.swing.JTabbedPane mainWindowTabbedPane;
    private javax.swing.JTree projectTree;
    private javax.swing.JScrollPane projectTreeScrollPane;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem undeleteMenuItem;
    // End of variables declaration//GEN-END:variables
}
