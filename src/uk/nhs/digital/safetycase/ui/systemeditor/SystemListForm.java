/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.nhs.digital.safetycase.ui.systemeditor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import uk.nhs.digital.projectuiframework.Project;
import uk.nhs.digital.safetycase.data.MetaFactory;
import uk.nhs.digital.safetycase.data.Persistable;
import uk.nhs.digital.safetycase.data.PersistableFactory;
import uk.nhs.digital.safetycase.data.Relationship;
import uk.nhs.digital.safetycase.ui.systemeditor.SystemEditor;
import uk.nhs.digital.safetycase.ui.systemeditor.SingleSystemEditorPanel;

/**
 *
 * @author SHUL1
 */
public class SystemListForm extends javax.swing.JPanel {

    private SystemEditor systemEditor = null;
    private final String[] columns = {"ID", "Name", "Description", "Created"};

    /**
     * Creates new form SystemListForm
     */
    public SystemListForm(SystemEditor p) {
        initComponents();
        systemEditor = p;
        DefaultTableModel d = new DefaultTableModel(columns, 0);
        systemTable.setModel(d);
    }

    void setTableModel(DefaultTableModel m) {
        systemTable.setModel(m);
    }

    DefaultTableModel getTableModel() {
        return (DefaultTableModel) systemTable.getModel();
    }

    void setSelected(int s) {
        systemTable.clearSelection();
        systemTable.setRowSelectionInterval(s, s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        systemListToolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        systemTable = new javax.swing.JTable();

        systemListToolBar.setRollover(true);

        newButton.setText("New");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        systemListToolBar.add(newButton);

        deleteButton.setText("Delete");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        systemListToolBar.add(deleteButton);

        editButton.setText("Edit");
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        systemListToolBar.add(editButton);

        systemTable.setAutoCreateRowSorter(true);
        systemTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[]{
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        systemTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        systemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(systemTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(systemListToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(systemListToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void systemTableMouseClicked(java.awt.event.MouseEvent evt) {

        int r = systemTable.getSelectedRow();
        String id = (String) systemTable.getModel().getValueAt(r, 0);
        systemEditor.setSelectedSystem(Integer.parseInt(id));
    }

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JDialog singleSystemEditor = new JDialog(JOptionPane.getFrameForComponent(this), true);
        singleSystemEditor.add(new SingleSystemEditorPanel().setParent(singleSystemEditor).setEditor(systemEditor));
        singleSystemEditor.pack();
        singleSystemEditor.setVisible(true);
    }

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Delete this System ?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            int r = systemTable.getSelectedRow();
            String id = (String) systemTable.getModel().getValueAt(r, 0);
            PersistableFactory<uk.nhs.digital.safetycase.data.System> pfs = MetaFactory.getInstance().getFactory("System");
            uk.nhs.digital.safetycase.data.System s = pfs.get(Integer.parseInt(id));
            int parentId = Integer.parseInt(s.getAttributeValue("ParentSystemID"));
            if (parentId != -1) {
                JOptionPane.showMessageDialog(null, "Delete root system or Delete using the System Graph Editor", "Unable to delete", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //pfs.delete(s);
            deleteRootSystem(s);
            pfs.delete(s);
            DefaultTableModel dtm = new DefaultTableModel(columns, 0);
            systemTable.setModel(dtm);
//            DefaultTableModel dtm = (DefaultTableModel) systemTable.getModel();
//            dtm.removeRow(r);
            systemEditor.getEditorComponent().notifyEditorEvent(Project.DELETE, s);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int r = systemTable.getSelectedRow();
            String id = (String) systemTable.getModel().getValueAt(r, 0);
            Persistable p = MetaFactory.getInstance().getFactory("System").get(Integer.parseInt(id));

            JDialog singleSystemEditor = new JDialog(JOptionPane.getFrameForComponent(this), "System ", true);
            singleSystemEditor.add(new SystemEditorDetails(p).setParent(singleSystemEditor));
            singleSystemEditor.pack();
            singleSystemEditor.setVisible(true);

//              javax.swing.JTabbedPane mainWindowTabbedPane = new javax.swing.JTabbedPane();
//              
//            SystemEditorDetails se1 = new SystemEditorDetails();
//            se1.setPersistableObject(p);
//            
//            EditorComponent ec = new EditorComponent(se1.getComponent(), p.getTitle(), SmartProject.getProject());
//            
//            Component c = ec.getComponent();
//            //mainWindowTabbedPane.add(ec.getTitle(), ec.getComponent());
//            //mainWindowTabbedPane.setSelectedComponent(mainWindowTabbedPane.getSelectedComponent());
//            mainWindowTabbedPane.setSelectedComponent(mainWindowTabbedPane.add(ec.getTitle(), ec.getComponent()));
//            mainWindowTabbedPane.setTabComponentAt(mainWindowTabbedPane.getSelectedIndex(), new UndockTabComponent(mainWindowTabbedPane));
//            ExternalEditorView.start(ec.getComponent(), ec.getTitle(),mainWindowTabbedPane);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void deleteRootSystem(uk.nhs.digital.safetycase.data.System s) {
        HashMap<String, ArrayList<Relationship>> hrels = s.getRelationshipsForLoad();
        if (hrels == null) {
            return;
        }
        List<Persistable> rootelements = new ArrayList<>();
        try {
            for (ArrayList<Relationship> a : hrels.values()) {
                for (Relationship r : a) {

                    Persistable p = MetaFactory.getInstance().getFactory(r.getTargetType()).get(r.getTarget());
                    rootelements.add(p);
                    // check for children/sub children realtionship
                    List<Persistable> lp = new ArrayList<>();
                    List<Persistable> pa = findchildrelations(p, lp);
                    for (Persistable per : pa) {
                        rootelements.add(per);
                    }
                }
            }
            for (Persistable del : rootelements) {
                    ArrayList<Relationship> d = del.deleteAutomaticRelationships();
                    del.purgeAutomaticRelationships(d);
                    MetaFactory.getInstance().getFactory(del.getDatabaseObjectName()).delete(del);
                    }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private List<Persistable> findchildrelations(Persistable relatedObject, List<Persistable> persistablelist)
            throws Exception {
        List<Persistable> lp = persistablelist;
        PersistableFactory<uk.nhs.digital.safetycase.data.System> pfs = MetaFactory.getInstance().getFactory("System");
        PersistableFactory<uk.nhs.digital.safetycase.data.SystemFunction> pfsf = MetaFactory.getInstance().getFactory("SystemFunction");
        Persistable p;
        try {
            if (relatedObject.getDatabaseObjectName().equals("System")) {

                uk.nhs.digital.safetycase.data.System system = pfs.get(relatedObject.getId());
                HashMap<String, ArrayList<Relationship>> hrels = system.getRelationshipsForLoad();
                if (hrels != null) {
                    for (ArrayList<Relationship> a : hrels.values()) {
                        for (Relationship r : a) {
                            if ((r.getComment() != null) && (r.getComment().contains("system diagram"))) {
                                p = MetaFactory.getInstance().getFactory(r.getTargetType()).get(r.getTarget());
                                lp.add(p);
                                //  find any sub children realtions
                                findchildrelations(p, lp);
                            }
                        }
                    }
                }
            }
            if (relatedObject.getDatabaseObjectName().equals("SystemFunction")) {
                uk.nhs.digital.safetycase.data.SystemFunction systemfunction = pfsf.get(relatedObject.getId());
                HashMap<String, ArrayList<Relationship>> hrels = systemfunction.getRelationshipsForLoad();
                if (hrels != null) {
                    for (ArrayList<Relationship> a : hrels.values()) {
                        for (Relationship r : a) {
                            if ((r.getComment() != null) && (r.getComment().contains("system diagram"))) {
                                p = MetaFactory.getInstance().getFactory(r.getTargetType()).get(r.getTarget());
                                lp.add(p);
                                // find any sub children realtions
                                findchildrelations(p, lp);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return lp;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JToolBar systemListToolBar;
    private javax.swing.JTable systemTable;
    // End of variables declaration                   
}
