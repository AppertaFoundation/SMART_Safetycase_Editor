/*
 * 
 *   Copyright 2017  NHS Digital
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *  
 */
package uk.nhs.digital.safetycase.ui;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import uk.nhs.digital.projectuiframework.Project;
import uk.nhs.digital.projectuiframework.ui.EditorComponent;
import uk.nhs.digital.safetycase.data.System;
import uk.nhs.digital.safetycase.data.MetaFactory;
import uk.nhs.digital.safetycase.data.Persistable;
import uk.nhs.digital.safetycase.data.PersistableFactory;
import uk.nhs.digital.safetycase.data.SystemFunction;

/**
 *
 * @author shul1
 */
public class SystemEditor extends javax.swing.JPanel
        implements uk.nhs.digital.safetycase.ui.PersistableEditor {

     private JDialog parent = null;
    private EditorComponent editorComponent = null;
    private ArrayList<System> systems = new ArrayList<>();
    private System system = null;

    private final String[] systemcolumns = {"Name", "Description", "Parent"};
    private final String[] functioncolumns = {"Name", "Description", "ParentFunction", "System"};
    private int newObjectProjectId = -1;

    /**
     * Creates new form SystemEditor
     */
    public SystemEditor() {
        initComponents();
        parentSystemList.setModel(new DefaultListModel());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        systemsPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        systemsTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        linksPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        functionsTable = new javax.swing.JTable();
        functionNew = new javax.swing.JButton();
        functionEdit = new javax.swing.JButton();
        functionDelete = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        discardButton = new javax.swing.JButton();
        mnemonicTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parentSystemList = new javax.swing.JList<>();

        systemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Systems"));

        systemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(systemsTable);

        jToolBar1.setRollover(true);

        newButton.setText("New");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(newButton);

        editButton.setText("Edit");
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(editButton);

        deleteButton.setText("Delete");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteButton);

        javax.swing.GroupLayout systemsPanelLayout = new javax.swing.GroupLayout(systemsPanel);
        systemsPanel.setLayout(systemsPanelLayout);
        systemsPanelLayout.setHorizontalGroup(
            systemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(systemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        systemsPanelLayout.setVerticalGroup(
            systemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Name");

        jLabel2.setText("Mnemonic");

        jLabel4.setText("Description");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        jScrollPane2.setViewportView(descriptionTextArea);

        linksPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Functions"));

        functionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(functionsTable);

        functionNew.setText("New");
        functionNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionNewActionPerformed(evt);
            }
        });

        functionEdit.setText("Edit");
        functionEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionEditActionPerformed(evt);
            }
        });

        functionDelete.setText("Delete");
        functionDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout linksPanelLayout = new javax.swing.GroupLayout(linksPanel);
        linksPanel.setLayout(linksPanelLayout);
        linksPanelLayout.setHorizontalGroup(
            linksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
            .addGroup(linksPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(functionNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(functionEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(functionDelete))
        );
        linksPanelLayout.setVerticalGroup(
            linksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linksPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(functionNew)
                    .addComponent(functionEdit)
                    .addComponent(functionDelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        discardButton.setText("Discard");
        discardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Parent system");

        parentSystemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(parentSystemList);

        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);
        editorPanel.setLayout(editorPanelLayout);
        editorPanelLayout.setHorizontalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTextField)
                            .addComponent(mnemonicTextField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editorPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discardButton))
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(276, 276, 276)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        editorPanelLayout.setVerticalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mnemonicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(discardButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(linksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(systemsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(systemsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selected = systemsTable.getSelectedRow();
        if (selected == -1) {
            return;
        }
        editorPanel.setEnabled(true);
        parentSystemList.clearSelection();
        System sys = systems.get(selected);
        nameTextField.setText(sys.getAttributeValue("Name"));
        descriptionTextArea.setText(sys.getAttributeValue("Description"));
        mnemonicTextField.setText(sys.getAttributeValue("Mnemonic"));
        int parent = Integer.parseInt(sys.getAttributeValue("ParentSystemID")); 
        if (parent != -1) {
            for (int i = 0; i < systems.size(); i++) {
                System ps = systems.get(i);
                if (ps.getId() == parent) {
                    parentSystemList.setSelectedIndex(i);
                    break;
                }
            }
        }
        try {
            this.PopulateFunctionTable(sys.getId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        systemsTable.clearSelection();
        nameTextField.setText("");
        this.mnemonicTextField.setText("");
        descriptionTextArea.setText("");
        parentSystemList.clearSelection();
    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int current = systemsTable.getSelectedRow();
        if (current == -1) {
            return;
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would You Like to Delete this System?", "Warning", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                System sys = systems.get(current);
                MetaFactory.getInstance().getFactory(sys.getDatabaseObjectName()).delete(sys);
                systems.remove(current);
                ((DefaultTableModel) systemsTable.getModel()).removeRow(current);
                editorComponent.notifyEditorEvent(Project.DELETE, sys);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void discardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButtonActionPerformed
        nameTextField.setText("");
        descriptionTextArea.setText("");
        mnemonicTextField.setText("");
        parentSystemList.clearSelection();
    }//GEN-LAST:event_discardButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        System sys = null;
        int selected = systemsTable.getSelectedRow();
        if (selected == -1) {
            sys = new System();
        } else {
            sys = systems.get(selected);
        }
        sys.setAttribute("Name", nameTextField.getText());
        sys.setAttribute("Description", descriptionTextArea.getText());
        sys.setAttribute("Mnemonic", mnemonicTextField.getText());
//        if (newObjectProjectId == -1)
//            sys.setAttribute("ProjectID", system.getAttribute("ProjectID").getIntValue());
//        else
            sys.setAttribute("ProjectID",newObjectProjectId);
        if (parentSystemList.getSelectedIndex() != -1) {
            System sp = systems.get(parentSystemList.getSelectedIndex());
            sys.setAttribute("ParentSystemID", sp.getId());
        }
        try {
            MetaFactory.getInstance().getFactory(sys.getDatabaseObjectName()).put(sys);
            String[] row = new String[systemcolumns.length];
            row[0] = sys.getAttributeValue("Name");
            row[1] = sys.getAttributeValue("Description");
            DefaultTableModel dtm = ((DefaultTableModel) systemsTable.getModel());
            if (selected == -1) {
                systems.add(sys);
                ((DefaultListModel)parentSystemList.getModel()).addElement(sys.getTitle());
                dtm.addRow(row);
                systemsTable.setRowSelectionInterval(systems.size() - 1, systems.size() - 1);
                editorComponent.notifyEditorEvent(Project.ADD, sys);
            } else {
                dtm.removeRow(selected);
                dtm.insertRow(selected, row);
                editorComponent.notifyEditorEvent(Project.UPDATE, sys);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void functionNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionNewActionPerformed
        System sys = null;
        int selected = systemsTable.getSelectedRow();
        if (selected == -1) {
            return;
        }
        try {
            sys = systems.get(selected);
            JDialog singleFunctionEditor = new JDialog(JOptionPane.getFrameForComponent(this), "System Function ", true);
            singleFunctionEditor.add(new SystemFunctionEditorPanel(null, sys).setParent(singleFunctionEditor));
            singleFunctionEditor.pack();
            singleFunctionEditor.setVisible(true);
            PopulateFunctionTable(sys.getId());
           
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_functionNewActionPerformed

    private void functionEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionEditActionPerformed

        System sys = null;
        int r = functionsTable.getSelectedRow();
        int selected = systemsTable.getSelectedRow();
        if (r == -1 || selected == -1) {
            return;
        }
        try {
            sys = systems.get(selected);
            String id = (String) functionsTable.getModel().getValueAt(r, 4);
            MetaFactory mf = MetaFactory.getInstance();
            PersistableFactory<SystemFunction> pfsf = mf.getFactory("SystemFunction");
            SystemFunction sf = pfsf.get(Integer.parseInt(id));
            JDialog singleFunctionEditor = new JDialog(JOptionPane.getFrameForComponent(this), "System Function ", true);
            singleFunctionEditor.add(new SystemFunctionEditorPanel(sf, sys).setParent(singleFunctionEditor));
            singleFunctionEditor.pack();
            singleFunctionEditor.setVisible(true);
            PopulateFunctionTable(sys.getId());
            singleFunctionEditor.dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_functionEditActionPerformed

    private void functionDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionDeleteActionPerformed
        int r = functionsTable.getSelectedRow();
        if (r == -1) {
            return;
        }
        try {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would You Like to Delete this Function?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                String id = (String) functionsTable.getModel().getValueAt(r, 4);
                MetaFactory mf = MetaFactory.getInstance();
                PersistableFactory<SystemFunction> pfsf = mf.getFactory("SystemFunction");
                SystemFunction sf = pfsf.get(Integer.parseInt(id));
                int sysID = Integer.parseInt(sf.getAttributeValue("SystemID"));
                pfsf.delete(sf);
                this.PopulateFunctionTable(sysID);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_functionDeleteActionPerformed

    private void PopulateFunctionTable(int sysID) throws Exception {
        ArrayList<Persistable> functions = MetaFactory.getInstance().getChildren("SystemFunction", "SystemID", sysID);
        DefaultTableModel dtm = new DefaultTableModel(functioncolumns, 0);
        if (functions != null) {
            for (Persistable p : functions) {
                SystemFunction sf = (SystemFunction) p;
                String z = Integer.toString(sf.getId());
                int sID = Integer.parseInt(sf.getAttributeValue("SystemID"));
                if(sf.isDeleted())
                    continue;
                if (sID == sysID) {
                    String name = sf.getTitle();
                    String description = sf.getAttributeValue("Description");
                    String id = Integer.toString(sf.getId());
                    String parentSystmFunction = "None";
                    int parentSystmFunctionID = Integer.parseInt(sf.getAttributeValue("ParentSystemFunctionID"));
                    if (parentSystmFunctionID != -1) {
                        MetaFactory mf = MetaFactory.getInstance();
                        PersistableFactory<SystemFunction> pfsf = mf.getFactory("SystemFunction");
                        SystemFunction sfunction = pfsf.get(parentSystmFunctionID);
                        //SystemFunction h = (SystemFunction) functions.get(parentSystmFunctionID);
                        parentSystmFunction = sfunction.getTitle();
                    }
                    String systemID = sf.getAttributeValue("SystemID");
                    System sys = (System)MetaFactory.getInstance().getFactory("System").get(Integer.parseInt(systemID));
                    dtm.addRow(new Object[]{name, description, parentSystmFunction, sys.getTitle(), id});
                }
            }
        }
        this.functionsTable.setModel(dtm);
//        HideTableColumnsMethod();
    }

//    private void HideTableColumnsMethod() {
//        hideTableColumn(this.functionsTable, "ID", 4);
//
//    }
//    private boolean empty( final String s ) {
  // Null-safe, short-circuit evaluation.
//  return s == null || s.trim().isEmpty();
//}
//    private void hideTableColumn(JTable tbl, String columnName, int cloumnid) {
//        tbl.getColumnModel().getColumn(cloumnid).setMinWidth(0);
//        tbl.getColumnModel().getColumn(cloumnid).setMaxWidth(0);
//        tbl.getColumnModel().getColumn(cloumnid).setWidth(0);

//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton discardButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JButton functionDelete;
    private javax.swing.JButton functionEdit;
    private javax.swing.JButton functionNew;
    private javax.swing.JTable functionsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel linksPanel;
    private javax.swing.JTextField mnemonicTextField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton newButton;
    private javax.swing.JList<String> parentSystemList;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel systemsPanel;
    private javax.swing.JTable systemsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPersistableObject(Persistable p) {
        DefaultTableModel dtm = new DefaultTableModel(systemcolumns, 0);
        DefaultTableModel ld = new DefaultTableModel(functioncolumns, 0);
        if (p == null) {
            systemsTable.setModel(dtm);
            functionsTable.setModel(ld);
            newButtonActionPerformed(null);
            return;
        }        
        int selected = -1;
        try {
            DefaultListModel dlm = new DefaultListModel();
            system = (System) p;
            functionsTable.setModel(ld);
            ArrayList<Persistable> sys = MetaFactory.getInstance().getChildren(system.getDatabaseObjectName(), "ProjectID", Integer.parseInt(system.getAttributeValue("ProjectID")));
            for (int i = 0; i < sys.size(); i++) {
                System h = (System) sys.get(i);
                if (h.isDeleted()) {
                    continue;
                }
                systems.add(h);
                dlm.addElement(h.getTitle());
                String[] row = new String[systemcolumns.length];
                row[0] = h.getAttributeValue("Name");
                row[1] = h.getAttributeValue("Description");
                if (h.getAttribute("ParentSystemID").getIntValue() == -1)
                    row[2] = "None";
                else    
                    row[2] = MetaFactory.getInstance().getFactory("System").get(h.getAttribute("ParentSystemID").getIntValue()).getAttributeValue("Name");
                if (p.getId() == h.getId()) {
                    selected = i;
                }
                dtm.addRow(row);
            }
            parentSystemList.setModel(dlm);
            systemsTable.setModel(dtm);
            if (selected != -1) {
                systemsTable.setRowSelectionInterval(selected, selected);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
//         HideTableColumnsMethod();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void setEditorComponent(EditorComponent ed) {
        editorComponent = ed;
    }

   @Override
    public void setNewObjectProjectId(int i) {
        newObjectProjectId = i;
    }
}
