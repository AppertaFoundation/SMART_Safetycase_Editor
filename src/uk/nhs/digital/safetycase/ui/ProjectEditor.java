/*
 * 
 *   Copyright 2017  NHS Digital
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *  
 */
package uk.nhs.digital.safetycase.ui;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import uk.nhs.digital.projectuiframework.Project;
import uk.nhs.digital.projectuiframework.smart.SmartProject;
import uk.nhs.digital.projectuiframework.ui.EditorComponent;
import uk.nhs.digital.safetycase.data.Hazard;
import uk.nhs.digital.safetycase.data.Location;
import uk.nhs.digital.safetycase.data.MetaFactory;
import uk.nhs.digital.safetycase.data.Persistable;
import uk.nhs.digital.safetycase.data.Relationship;
import uk.nhs.digital.safetycase.data.Role;

/**
 *
 * @author damian
 */
public class ProjectEditor 
        extends javax.swing.JPanel 
        implements uk.nhs.digital.safetycase.ui.PersistableEditor
{
    private boolean setViaMenu = false;
    private boolean create = false;
    private JDialog parent = null;
    private SmartProject smartProject = null;
    private EditorComponent editorComponent = null;
    private uk.nhs.digital.safetycase.data.Project project = null;
    private boolean modified = false;
    /**
     * Creates new form ProjectEditor
     * @param sp
     */
    public ProjectEditor(uk.nhs.digital.projectuiframework.Project sp) {
        initComponents();
        setViaMenu = true;
        saveButton.setVisible(false);
        saveButton.setEnabled(false);
        deleteButton.setVisible(false);
        deleteButton.setEnabled(false);
        smartProject = (SmartProject)sp;
        ownerTextField.setText(System.getProperty("user.name"));
        projectSummaryTextPane.setText("New");
        SmartProject.getProject().addNotificationSubscriber(this);
    }

    public ProjectEditor() {
        initComponents();
        createProjectButton.setVisible(false);
        createProjectButton.setEnabled(false);
        cancelCreateButton.setVisible(false);
        cancelCreateButton.setEnabled(false);
        SmartProject.getProject().addNotificationSubscriber(this);
    }
    
    @Override
    public boolean wantsScrollPane() { return false; }
    
//    @Override
//    public void addNotify() {
//        super.addNotify();
//        SmartProject.getProject().addNotificationSubscriber(this);
//    }
    
//    @Override
//    public void removeNotify() {
//        super.removeNotify();
//        SmartProject.getProject().removeNotificationSubscriber(this);
//    }
    
    public ProjectEditor setParent(JDialog p) 
    { 
        parent = p; 
        return this;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ownerTextField = new javax.swing.JTextField();
        customerTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelCreateButton = new javax.swing.JButton();
        createProjectButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectSummaryTextPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText("Name");

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("Owner");

        ownerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ownerTextFieldKeyTyped(evt);
            }
        });

        customerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                customerTextFieldKeyTyped(evt);
            }
        });

        jLabel3.setText("Author");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                            .addComponent(ownerTextField)
                            .addComponent(customerTextField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ownerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel5);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                descriptionTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(descriptionTextArea);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel3.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 90, -1));

        cancelCreateButton.setText("Cancel");
        cancelCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCreateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(cancelCreateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, -1, -1));

        createProjectButton.setText("Create");
        createProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectButtonActionPerformed(evt);
            }
        });
        jPanel3.add(createProjectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, -1, -1));

        jPanel2.add(jPanel3);
        jPanel2.add(jPanel6);

        add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Project summary"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        projectSummaryTextPane.setEditable(false);
        jScrollPane2.setViewportView(projectSummaryTextPane);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCreateButtonActionPerformed
        parent.dispose();
    }//GEN-LAST:event_cancelCreateButtonActionPerformed

    private void createProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectButtonActionPerformed

        try {
            String duplicateWarning = MetaFactory.getInstance().getDuplicateCheckMessage("Project", "Project", nameTextField.getText(), -1, null);
            if (duplicateWarning != null) {
                JOptionPane.showMessageDialog(this, duplicateWarning, "Duplicate project name", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Duplicate detection failed. Send logs to support", "Warning", JOptionPane.INFORMATION_MESSAGE);
            SmartProject.getProject().log("Failed to do duplicate detection in PorjectEditor", e);
        }

        project = new uk.nhs.digital.safetycase.data.Project();
        project.setAttribute("Name", nameTextField.getText());
        project.setAttribute("Owner", ownerTextField.getText());
        project.setAttribute("Customer", customerTextField.getText());
        project.setAttribute("Description", descriptionTextArea.getText());
        try {
            MetaFactory.getInstance().getFactory(project.getDatabaseObjectName()).put(project);
            smartProject.editorEvent(Project.ADD, project);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to save Porject. Send logs to support", "Save failed", JOptionPane.ERROR_MESSAGE);
            SmartProject.getProject().log("Failed to save in ProjectEditor", e);
        }
        unsubscribe();
        parent.dispose();
    }//GEN-LAST:event_createProjectButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        try {
            String duplicateWarning = MetaFactory.getInstance().getDuplicateCheckMessage("Project", "Project", nameTextField.getText(), -1, project);
            if (duplicateWarning != null) {
                JOptionPane.showMessageDialog(this, duplicateWarning, "Duplicate project name", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Duplicate detection failed. Send logs to support", "Warning", JOptionPane.INFORMATION_MESSAGE);
            SmartProject.getProject().log("Failed to do duplicate detection in PorjectEditor existing save", e);
        }

        boolean created = false;
        if (project == null) {
            project = new uk.nhs.digital.safetycase.data.Project();
            created = true;
        }
        project.setAttribute("Name", nameTextField.getText());
        project.setAttribute("Owner", ownerTextField.getText());
        project.setAttribute("Customer", customerTextField.getText());
        project.setAttribute("Description", descriptionTextArea.getText());
        try {
            MetaFactory.getInstance().getFactory(project.getDatabaseObjectName()).put(project);
            if (created)
                SmartProject.getProject().editorEvent(Project.ADD, project);
            else
                SmartProject.getProject().editorEvent(Project.UPDATE, project);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to save Porject. Send logs to support", "Save failed", JOptionPane.ERROR_MESSAGE);
            SmartProject.getProject().log("Failed to save in ProjectEditor", e);
        }
        makeProjectSummary();
        modified = false;
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
        if (project == null)
            return;
        int r = JOptionPane.showConfirmDialog(this, "Really delete this Project ?", "Confirm delete", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);        
        if (r == JOptionPane.CANCEL_OPTION)
            return;
        
        try {
            MetaFactory.getInstance().getFactory("Project").delete(project);
            SmartProject.getProject().editorEvent(Project.DELETE, project);
            SmartProject.getProject().getProjectWindow().closeContainer(this);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to delete Porject. Send logs to support", "Delete failed", JOptionPane.ERROR_MESSAGE);
            SmartProject.getProject().log("Failed to delete in ProjectEditor", e);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void nameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyTyped
        modified = true;
    }//GEN-LAST:event_nameTextFieldKeyTyped

    private void ownerTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ownerTextFieldKeyTyped
        modified = true;
    }//GEN-LAST:event_ownerTextFieldKeyTyped

    private void customerTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerTextFieldKeyTyped
        modified = true;
    }//GEN-LAST:event_customerTextFieldKeyTyped

    private void descriptionTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionTextAreaKeyTyped
        modified = true;
    }//GEN-LAST:event_descriptionTextAreaKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelCreateButton;
    private javax.swing.JButton createProjectButton;
    private javax.swing.JTextField customerTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField ownerTextField;
    private javax.swing.JTextPane projectSummaryTextPane;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPersistableObject(Persistable p) {
        if (p == null) {
            create = true;
            return;
        }
        project = (uk.nhs.digital.safetycase.data.Project)p;
        nameTextField.setText(project.getAttributeValue("Name"));
        customerTextField.setText(project.getAttributeValue("Customer"));
        descriptionTextArea.setText(project.getAttributeValue("Description"));
        ownerTextField.setText(project.getAttributeValue("Owner"));
        makeProjectSummary();
    }

    private void makeProjectSummary() {
        // Go through counting systems, care settings, roles, and 
        // the various hazard states (that last as per the hazard analysis view)
        
        if (project == null)
            return;
        try {
            StringBuilder sb = new StringBuilder();
            Collection<uk.nhs.digital.safetycase.data.System> systems = MetaFactory.getInstance().getFactory("System").getEntries(project.getId());
            int systemcount = 0;
            int rootsystems = 0;
            int functions = 0;
            for (uk.nhs.digital.safetycase.data.System s : systems) {
                if (s.isDeleted()) {
                    continue;
                }
                systemcount++;
                if ((s.getAttribute("ParentSystemID") == null) || (s.getAttribute("ParentSystemID").getIntValue() == -1)) {
                    rootsystems++;
                }
                ArrayList<Relationship> rels = s.getRelationships("SystemFunction");
                if (rels != null) {
                    for (Relationship r : rels) {
                        String m = r.getManagementClass();
                        if ((m != null) && (m.contentEquals("Diagram"))) {
                            if (!r.isDeleted())
                                functions++;
                        }
                    }
                }
            }
            if (systemcount == 1) {
                sb.append("There is one system defined. It implements ");
                if (functions == 1) {
                    sb.append("one identified system function.");
                } else {
                    sb.append(functions);
                    sb.append(" identified system functions.");
                }
            } else {
                sb.append("There are ");
                sb.append(systemcount);
                sb.append(" systems defined, of which ");
                if (rootsystems == 1) {
                    sb.append("one is top-level.");
                } else {
                    sb.append(rootsystems);
                    sb.append(" are top-level.");
                }
                sb.append("\n\nThey implement ");
                if (functions == 1) {
                    sb.append("one identified system function.\n\n");
                } else {
                    sb.append(functions);
                    sb.append(" system functions between them.\n\n");
                }
            }
                
            
            
            Collection<Location> locations = MetaFactory.getInstance().getFactory("Location").getEntries(project.getId());
            int settings = 0;
            for (Location l : locations) {
                if (l.isDeleted())
                    continue;
                settings++;
            }
            if (settings == 1) {
                sb.append("There is one Care setting identified and ");
            } else {
                sb.append("There are ");
                sb.append(settings);
                sb.append(" Care settings identified and ");
            }
            Collection<Role> roles = MetaFactory.getInstance().getFactory("Role").getEntries(project.getId());
            int role = 0;
            for (Role r : roles) {
                if (r.isDeleted())
                    continue;
                role++;
            }
            if (role == 1) {
                sb.append(" one Role.");
            } else {
                sb.append(role);
                sb.append(" Roles.\n\n");
            }
            
            Collection<Hazard> hazards = MetaFactory.getInstance().getFactory("Hazard").getEntries(project.getId());
            int hcount = 0;
            int wip = 0;
            int accepted = 0;
            int notaccepted = 0;
            int justified = 0;
            ArrayList<String> htypes = new ArrayList<>();
            for (Hazard h : hazards) {
                if (h.isDeleted())
                    continue;
                hcount++;
                String t = h.getAttributeValue("GroupingType");
                if (t == null)
                    t = "Generic";
                if (!htypes.contains(t))
                    htypes.add(t);
                // Rules:
                // A hazard with a residual rating of > 3 goes in "unacceptable" UNLESS
                // it has a non-empty clinical justification
                // A hazard with a residual rating of <= 3 goes in "accepted"
                // A Hazard with no residual rating goes in "workinprogress"

                if ((h.getAttribute("ResidualRiskRating") == null) || (h.getAttribute("ResidualRiskRating").getIntValue() == -1)) {
                    wip++;
                    continue;
                }
                if (h.getAttribute("ResidualRiskRating").getIntValue() <= 3) {
                    accepted++;
                } else {
                    if ((h.getAttributeValue("ClinicalJustification") == null) || (h.getAttributeValue("ClinicalJustification").trim().length() == 0)) {
                        notaccepted++;
                    } else {
                        justified++;
                    }
                }
            }
            if (hcount == 1) {
                sb.append("There is one hazard defined, which is ");
                if (wip == 1) {
                    sb.append(" currently work in progress.");
                } else if (accepted == 1) {
                    sb.append(" within acceptable limits of likelyhood and severity.");
                } else if (justified == 1) {
                    sb.append(" outside those limits but are considered clinically-justified.\n\n");
                } else {
                    sb.append(" outside acceptable limits (that is, it has a residual risk rating of > 3) and is not accepted due to lack of clinical justification.\n\n");
                }
            } else {
                sb.append("There are ");
                sb.append(hcount);                
                sb.append(" hazards identified of which ");
                sb.append(wip);
                if (wip == 1)
                    sb.append(" is ");
                else 
                    sb.append(" are ");
                sb.append("currently work-in-progress and still undergoing analysis.\n");
                sb.append(accepted);
                if (accepted == 1)
                    sb.append(" is ");
                else 
                    sb.append(" are ");
                sb.append(" within acceptable limits of likelyhood and severity and ");
                sb.append(justified);
                if (justified == 1)
                    sb.append(" is ");
                else 
                    sb.append(" are ");

                sb.append(" outside those limits but considered clinically-justified.\n\n");
                sb.append(notaccepted);
                if (notaccepted == 1)
                    sb.append(" is ");
                else 
                    sb.append(" are ");                
                sb.append(" outside acceptable limits (that is with a residual risk rating of > 3) and not accepted due to lack of clinical justification\n\n");
                if (htypes.size() == 1) {
                    sb.append("One hazard type was identified.");
                } else {
                    sb.append(htypes.size());
                    sb.append(" hazard types were identified.");
                }
                
            }
            projectSummaryTextPane.setText(sb.toString());
            
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to make Project summary. Send logs to support", "Save failed", JOptionPane.INFORMATION_MESSAGE);
            SmartProject.getProject().log("Failed to make Project summary", e);
            projectSummaryTextPane.setText("Problem generating current project summary. Contact support if this persists.");
        }
    }
    
    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void setEditorComponent(EditorComponent ed) {
        editorComponent = ed;
    }

    @Override
    public void setNewObjectProjectId(int i) {
        
    }

    @Override
    public boolean notification(int evtype, Object o) {
        if (evtype == Project.SAVE) {
            saveButtonActionPerformed(null);
            return false;
        }
        makeProjectSummary();
        return true;
    }
    
   @Override
    public JPanel getEditor(Object o) {
        try {            
            uk.nhs.digital.safetycase.data.Project c = (uk.nhs.digital.safetycase.data.Project)o;
            if (c.getTitle().equals(project.getTitle()))
                return this;
        }
        catch (Exception e) {}
        return null;
    }    
    
    @Override
    public void unsubscribe() {
        SmartProject.getProject().removeNotificationSubscriber(this);
    }

    @Override
    public boolean isModified() {
        return modified;
    }
    
}
